apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${CI_PROJECT_NAME}-cronjob
  annotations:
    eks.amazonaws.com/role-arn: ${IRSA_ROLE_ARN_CRONJOB}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${CI_PROJECT_NAME}-api
  annotations:
    eks.amazonaws.com/role-arn: ${IRSA_ROLE_ARN_API}

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: ${CI_PROJECT_NAME}-configmap
data:
  config.yml: |
    UrlPrefix: ${URL_PREFIX}
    NORDPOOL:
      AUTH_URL: ${NORDPOOL_AUTH_URL}
      TOKEN_URL: ${NORDPOOL_TOKEN_URL}
      USER: ${NORDPOOL_USER}
      PASSWORD: "${NORDPOOL_PASSWORD}"
      INVOICE_DOWNLOAD_ENDPOINT: ${NORDPOOL_INVOICE_URL}
      CLIENT_ID: ${NORDPOOL_CLIENT_ID}
      CLIENT_SECRET: ${NORDPOOL_CLIENT_SECRET}
    GOLIVEDATE: ${GO_LIVE_DATE}
    S3REGION: ${NORDPOOL_S3_REGION}
    S3BUCKET: ${NORDPOOL_S3_BUCKET}

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: ${CI_PROJECT_NAME}-cronjob
  labels:
    job: "${CI_JOB_ID}"
spec:
  concurrencyPolicy: Replace
  schedule: "00 04 * * *"
  startingDeadlineSeconds: 120
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        metadata:
          labels:
            app: ${CI_PROJECT_NAME}-cronjob
            commit: "${CI_COMMIT_SHORT_SHA}"
            job: "${CI_JOB_ID}"
        spec:
          serviceAccountName: ${CI_PROJECT_NAME}-cronjob
          containers:
            - name: ${CI_PROJECT_NAME}-cronjob
              image: ${CI_REGISTRY_IMAGE}/cronjob:${IMAGE_TAG}
              imagePullPolicy: Always
              volumeMounts:
                - name: config-volume
                  mountPath: /service/service/config.yml
                  subPath: config.yml
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "100m"
                limits:
                  memory: "128Mi"
                  cpu: "200m"
          restartPolicy: Never
          volumes:
            - name: config-volume
              configMap:
                name: ${CI_PROJECT_NAME}-configmap
          imagePullSecrets:
            - name: ${CI_PROJECT_NAME}
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: workload-type
                        operator: In
                        values:
                          - core
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${CI_PROJECT_NAME}-api
  labels:
    app: ${CI_PROJECT_NAME}-api
    job: "${CI_JOB_ID}"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ${CI_PROJECT_NAME}-api

  # Pod template
  template:
    metadata:
      labels:
        app: ${CI_PROJECT_NAME}-api
        commit: "${CI_COMMIT_SHORT_SHA}"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: workload-type
                    operator: In
                    values:
                      - core
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: ${CI_PROJECT_NAME}-api
      serviceAccountName: ${CI_PROJECT_NAME}-api
      containers:
        - name: ${CI_PROJECT_NAME}-api
          image: ${CI_REGISTRY_IMAGE}/api:${IMAGE_TAG}
          imagePullPolicy: Always
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "384Mi"
              cpu: "200m"
          volumeMounts:
            - name: config-volume
              mountPath: /service/service/config.yml
              subPath: config.yml
      volumes:
        - name: config-volume
          configMap:
            name: ${CI_PROJECT_NAME}-configmap
      imagePullSecrets:
        - name: ${CI_PROJECT_NAME}
        
---
apiVersion: v1
kind: Service
metadata:
  name: ${CI_PROJECT_NAME}
  labels:
    app: ${CI_PROJECT_NAME}
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: ${CI_PROJECT_NAME}-api
  selector:
    app: ${CI_PROJECT_NAME}-api
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: ${CI_PROJECT_NAME}-api-pdb
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: ${CI_PROJECT_NAME}-api
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ${CI_PROJECT_NAME}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: ${URL_PREFIX}/$2
    nginx.ingress.kubernetes.io/proxy-body-size: 5m
    nginx.ingress.kubernetes.io/proxy-send-timeout: "180"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "180"
spec:
  rules:
    - http:
        paths:
          - path: ${URL_PREFIX}(/|$)(.*)
            backend:
              serviceName: ${CI_PROJECT_NAME}
              servicePort: 80
